{"ast":null,"code":"var _jsxFileName = \"/Users/oyo/Desktop/TicTacToe-1/src/Board.js\";\nimport React, { Component } from 'react';\nimport Grid from './Grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Board extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      turn: 'X',\n      cells: ['', '', '', '', '', '', '', '', '', ''],\n      play: true\n    };\n\n    this.toggleTurn = turn => {\n      if (turn == 'X') this.setState({\n        turn: 'O'\n      });else this.setState({\n        turn: 'X'\n      });\n    };\n\n    this.onPlay = (key, turn) => {\n      if (this.state.cells[key] == '') {\n        let updatedCells = [...this.state.cells];\n        updatedCells[key] = turn;\n        this.setState({\n          cells: updatedCells\n        });\n        this.toggleTurn(turn);\n      }\n    };\n\n    this.checkStatus = cells => {\n      let winningStates = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n      for (let i = 0; i < winningStates.length; i++) {\n        if (cells[winningStates[i][0]] == cells[winningStates[i][1]] && cells[winningStates[i][1]] == cells[winningStates[i][2]] && cells[winningStates[i][0]] != '') {\n          return cells[winningStates[i][0]];\n        }\n      }\n\n      for (let i = 0; i < 9; i++) {\n        if (cells[i] == '') return 'C';\n      }\n\n      return 'T';\n    };\n  }\n\n  render() {\n    let status = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Next Move: \", this.state.turn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 22\n    }, this);\n\n    switch (this.checkStatus(this.state.cells)) {\n      case 'X':\n        status = /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" Winner is X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 34\n        }, this);\n        break;\n\n      case 'O':\n        status = /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" Winner is O\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 34\n        }, this);\n        break;\n\n      case 'T':\n        status = /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \" Everybody Wins\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 34\n        }, this);\n        break;\n\n      default:\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        onPlay: this.onPlay,\n        turn: this.state.turn,\n        cells: this.state.cells\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Board;","map":{"version":3,"sources":["/Users/oyo/Desktop/TicTacToe-1/src/Board.js"],"names":["React","Component","Grid","Board","state","turn","cells","play","toggleTurn","setState","onPlay","key","updatedCells","checkStatus","winningStates","i","length","render","status"],"mappings":"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","sourcesContent":["import React , { Component } from 'react'\nimport Grid from './Grid'\n\nclass Board extends Component {\n\n    state = {\n        turn : 'X' ,\n        cells : ['','','','','','','','','',''],\n        play : true\n    }\n\n    toggleTurn = (turn) => {\n        if ( turn == 'X' )\n            this.setState( {turn : 'O' } )\n        else\n            this.setState ( {turn : 'X' } )\n    }\n\n    onPlay = (key, turn) => {\n        if (this.state.cells[key] == '') {\n            let updatedCells = [...this.state.cells]\n            updatedCells[key] = turn\n            this.setState( { cells : updatedCells } )\n            this.toggleTurn( turn )\n        }\n    }\n\n    checkStatus = (cells) => {\n        \n        let winningStates =[\n            [0,1,2],\n            [3,4,5],\n            [6,7,8],\n            [0,3,6],\n            [1,4,7],\n            [2,5,8],\n            [0,4,8],\n            [2,4,6]\n        ]\n        for ( let i = 0 ; i < winningStates.length ; i++ ) {\n            if ( cells[winningStates[i][0]] == cells[winningStates[i][1]] && cells[winningStates[i][1]] == cells[winningStates[i][2]] &&  cells[winningStates[i][0]] != '') {\n                return cells[winningStates[i][0]]\n            }\n        }\n        for ( let i = 0; i < 9 ; i ++ ) {\n            if ( cells [i] == '' ) return 'C'\n        }\n        \n        return 'T'\n \n    }\n\n    render () {\n\n        let status = <p>Next Move: {this.state.turn}</p>\n\n        switch ( this.checkStatus(this.state.cells) ) {\n             case 'X' : status = <p> Winner is X</p>\n             break;\n             case 'O' : status = <p> Winner is O</p>\n             break;\n             case 'T' : status = <p> Everybody Wins</p>\n             break;\n             default:\n        }\n\n        return (\n            <div >\n                <Grid onPlay = {this.onPlay} turn = {this.state.turn} cells = {this.state.cells}>\n\n                </Grid>\n                {status}\n            </div>\n\n        )\n    }\n}\n\nexport default Board"]},"metadata":{},"sourceType":"module"}